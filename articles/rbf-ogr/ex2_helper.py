import numpy as np
from numpy.linalg import cond, inv
import os.path
from scipy.optimize import minimize_scalar
from scipy.io import loadmat
################################################################
#
# forcing terms
#
################################################################

def foo1(node):
    return node[0]*2
def exact1(node):
    return node[0]

# l=3
def foo2(node):
    return (node[0]**2 - node[1]**2) * 6
def exact2(node):
    return (node[0]**2 - node[1]**2)

def foo3(node):
    return (node[0]**2 - node[1]**2) * node[2] * 12

def exact3(node):
    return (node[0]**2 - node[1]**2) * node[2]

# l=4
def foo4(node):
    return (3*node[0]**2 - node[1]**2)*node[1]*node[2] * 20
def exact4(node):
    return (3*node[0]**2 - node[1]**2)*node[1]*node[2]

################################################################
#
# RBFs
#
################################################################



########################################################################################
#
# misc
#
########################################################################################

def dist(node1, node2):
    return np.sqrt( (node1[0]-node2[0])**2 + (node1[1]-node2[1])**2 + (node1[2]-node2[2])**2 )

########################################################################################
#
# Nodesets
#
########################################################################################

def gen_spiral_nodes(n):
    indices = np.arange(0, n, dtype=float) + 0.5
    phi = np.arccos(1 - 2*indices/n)
    theta = np.pi * (1 + 5**0.5) * indices
    xs, ys, zs = np.cos(theta) * np.sin(phi), np.sin(theta) * np.sin(phi), np.cos(phi)
    return np.array([(x,y,z) for x,y,z in zip(xs,ys,zs)])

sym_t_design_files = {3: 'sf001.00003', 6: 'sf002.00006', 8: 'sf003.00008', 14: 'sf004.00014', 18: 'sf005.00018', 26: 'sf006.00026', 32: 'sf007.00032', 42: 'sf008.00042', 50: 'sf009.00050', 62: 'sf010.00062', 72: 'sf011.00072', 86: 'sf012.00086', 98: 'sf013.00098', 114: 'sf014.00114', 128: 'sf015.00128', 146: 'sf016.00146', 163: 'sf017.00163', 182: 'sf018.00182', 201: 'sf019.00201', 222: 'sf020.00222', 243: 'sf021.00243', 266: 'sf022.00266', 289: 'sf023.00289', 314: 'sf024.00314', 339: 'sf025.00339', 366: 'sf026.00366', 393: 'sf027.00393', 422: 'sf028.00422', 451: 'sf029.00451', 482: 'sf030.00482', 513: 'sf031.00513', 546: 'sf032.00546', 579: 'sf033.00579', 614: 'sf034.00614', 649: 'sf035.00649', 686: 'sf036.00686', 723: 'sf037.00723', 762: 'sf038.00762', 801: 'sf039.00801', 842: 'sf040.00842', 883: 'sf041.00883', 926: 'sf042.00926', 969: 'sf043.00969', 1014: 'sf044.01014', 1059: 'sf045.01059', 1106: 'sf046.01106', 1153: 'sf047.01153', 1202: 'sf048.01202', 1251: 'sf049.01251', 1302: 'sf050.01302', 1353: 'sf051.01353', 1406: 'sf052.01406', 1459: 'sf053.01459', 1514: 'sf054.01514', 1569: 'sf055.01569', 1626: 'sf056.01626', 1683: 'sf057.01683', 1742: 'sf058.01742', 1801: 'sf059.01801', 1862: 'sf060.01862', 1923: 'sf061.01923', 1986: 'sf062.01986', 2049: 'sf063.02049', 2114: 'sf064.02114', 2179: 'sf065.02179', 2246: 'sf066.02246', 2313: 'sf067.02313', 2382: 'sf068.02382', 2451: 'sf069.02451', 2522: 'sf070.02522', 2593: 'sf071.02593', 2666: 'sf072.02666', 2739: 'sf073.02739', 2814: 'sf074.02814', 2889: 'sf075.02889', 2966: 'sf076.02966', 3043: 'sf077.03043', 3122: 'sf078.03122', 3201: 'sf079.03201', 3282: 'sf080.03282', 3363: 'sf081.03363', 3446: 'sf082.03446', 3529: 'sf083.03529', 3614: 'sf084.03614', 3699: 'sf085.03699', 3786: 'sf086.03786', 3873: 'sf087.03873', 3962: 'sf088.03962', 4051: 'sf089.04051', 4142: 'sf090.04142', 4233: 'sf091.04233', 4326: 'sf092.04326', 4419: 'sf093.04419', 4514: 'sf094.04514', 4609: 'sf095.04609', 4706: 'sf096.04706', 4803: 'sf097.04803', 4902: 'sf098.04902', 5001: 'sf099.05001', 5102: 'sf100.05102', 5203: 'sf101.05203', 5306: 'sf102.05306', 5409: 'sf103.05409', 5514: 'sf104.05514', 5619: 'sf105.05619', 5726: 'sf106.05726', 5833: 'sf107.05833', 5942: 'sf108.05942', 6051: 'sf109.06051', 6162: 'sf110.06162', 6273: 'sf111.06273', 6386: 'sf112.06386', 6499: 'sf113.06499', 6614: 'sf114.06614', 6729: 'sf115.06729', 6846: 'sf116.06846', 6963: 'sf117.06963', 7082: 'sf118.07082', 7201: 'sf119.07201', 7322: 'sf120.07322', 7443: 'sf121.07443', 7566: 'sf122.07566', 7689: 'sf123.07689', 7814: 'sf124.07814', 7939: 'sf125.07939', 8066: 'sf126.08066', 8193: 'sf127.08193', 8322: 'sf128.08322', 8451: 'sf129.08451', 8582: 'sf130.08582', 8713: 'sf131.08713', 8846: 'sf132.08846', 8979: 'sf133.08979', 9114: 'sf134.09114', 9249: 'sf135.09249', 9386: 'sf136.09386', 9523: 'sf137.09523', 9662: 'sf138.09662', 9801: 'sf139.09801', 9942: 'sf140.09942', 10083: 'sf141.10083', 10226: 'sf142.10226', 10369: 'sf143.10369', 10514: 'sf144.10514', 10659: 'sf145.10659', 10806: 'sf146.10806', 10953: 'sf147.10953', 11102: 'sf148.11102', 11251: 'sf149.11251', 11402: 'sf150.11402', 11553: 'sf151.11553', 11706: 'sf152.11706', 11859: 'sf153.11859', 12014: 'sf154.12014', 12169: 'sf155.12169', 12326: 'sf156.12326', 12483: 'sf157.12483', 12642: 'sf158.12642', 12801: 'sf159.12801', 12962: 'sf160.12962', 13123: 'sf161.13123', 13286: 'sf162.13286', 13449: 'sf163.13449', 13614: 'sf164.13614', 13779: 'sf165.13779', 13946: 'sf166.13946', 14113: 'sf167.14113', 14282: 'sf168.14282', 14451: 'sf169.14451', 14622: 'sf170.14622', 14793: 'sf171.14793', 14966: 'sf172.14966', 15139: 'sf173.15139', 15314: 'sf174.15314', 15489: 'sf175.15489', 15666: 'sf176.15666', 15843: 'sf177.15843', 16022: 'sf178.16022', 16201: 'sf179.16201', 16382: 'sf180.16382'}

sym_t_design_Ns = list(sym_t_design_files.keys())

def gen_symmetric_t_design_nodes(n_try):
    n = np.argmin(np.abs([n_try - Ni for Ni in sym_t_design_Ns]))
    file_path = sym_t_design_files[sym_t_design_Ns[n]]
    file_path = os.path.join('pnts','sym_t_design', file_path)
    nodes = np.loadtxt(file_path)
    return len(nodes), nodes

min_energy_Ns = list(range(3,4101))
min_energy_Ns += list(range(4145,4174,2))
min_energy_Ns += list(range(4174, 4717))
min_energy_Ns += [4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000, 10201, 16000, 16384, 25000, 36864, 40000, 62500, 90000]

def gen_min_energy_nodes(n_try):
    n = np.argmin(np.abs([n_try - Ni for Ni in min_energy_Ns]))
    file_path = os.path.join('pnts','min_energy', 'me%05d.mat'%n)
    nodes = loadmat(file_path)['x']
    return len(nodes), nodes

max_det_Ns = [4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000, 10201, 10404, 10609, 10816, 11025, 11236, 11449, 11664, 11881, 12100, 12321, 12544, 12769, 12996, 13225, 13456, 13689, 13924, 14161, 14400, 14641, 14884, 15129, 15376, 15625, 15876, 16129, 16384, 16641, 16900, 17161, 17424, 17689, 17956, 18225, 18496, 18769, 19044, 19321, 19600, 19881, 20164, 20449, 20736, 21025, 21316, 21609, 21904, 22201, 22500, 22801, 23104, 23409, 23716, 24025, 24336, 24649, 24964, 25281, 25600, 25921, 26244, 26569, 26896, 27225, 27556, 36864]

def gen_max_det_nodes(n_try):
    i = np.argmin(np.abs([n_try - Ni for Ni in max_det_Ns]))
    n = max_det_Ns[i]
    file_path = os.path.join('pnts','max_determinant', 'md%05d.mat'%n)
    nodes = loadmat(file_path)['x']
    return len(nodes), nodes

equ_area_icos_Ns = [12, 42, 162, 642, 2562, 10242, 40962]
def gen_equ_area_icos_nodes(n_try):
    i = np.argmin(np.abs([n_try - Ni for Ni in equ_area_icos_Ns]))
    n = equ_area_icos_Ns[i]
    file_path = os.path.join('pnts','equal_area_mesh_icos', 'eami%05d.mat'%n)
    nodes = loadmat(file_path)['x']
    return len(nodes), nodes


########################################################################################
#
# Shape parameter optimization
#
########################################################################################
def root_find(eps, dist_mat, P, target_cond):
    num_basis = P.shape[1]
    A = np.exp(-(eps*dist_mat)**2)
    AP = np.block([[A,P],[P.T, np.zeros((num_basis,num_basis))]])
    return np.log(cond(AP)/target_cond) ** 2

def check_eps(eps, dist_mat):
    A = np.exp(-(eps*dist_mat)**2)
    return cond(A)

def skeel_cond(A):
    return np.max(np.abs( np.abs(inv(A))@np.abs(A) ))

