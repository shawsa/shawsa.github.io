'''
Spherical harmonics coppied from Prof. Wright's code.
partial derivatives were generated usying Sympy
'''

import numpy as np
from numpy.linalg import norm

sphere_harm_degs = []
for deg in range(8):
    sphere_harm_degs += [deg] * (2*deg+1)

sphere_harm = []
sphere_harm.append( lambda x, y , z :1+0*x)
sphere_harm.append( lambda x, y , z :y)
sphere_harm.append( lambda x, y , z :z)
sphere_harm.append( lambda x, y , z :x)
sphere_harm.append( lambda x, y , z :x*y)
sphere_harm.append( lambda x, y , z :y*z)
sphere_harm.append( lambda x, y , z :3*z**2 - 1)
sphere_harm.append( lambda x, y , z :x*z)
sphere_harm.append( lambda x, y , z :x**2 - y**2)
sphere_harm.append( lambda x, y , z :y*(-3*x**2 + y**2))
sphere_harm.append( lambda x, y , z :x*y*z)
sphere_harm.append( lambda x, y , z :y*(1 - 5*z**2))
sphere_harm.append( lambda x, y , z :z*(-3 + 5*z**2))
sphere_harm.append( lambda x, y , z :x*(1 - 5*z**2))
sphere_harm.append( lambda x, y , z :z*(x**2 - y**2))
sphere_harm.append( lambda x, y , z :x*(x**2 - 3*y**2))
sphere_harm.append( lambda x, y , z :x*y*(x**2 - y**2))
sphere_harm.append( lambda x, y , z :y*z*(y**2 - 3*x**2))
sphere_harm.append( lambda x, y , z :x*y*(-1 + 7*z**2))
sphere_harm.append( lambda x, y , z :y*z*(3 - 7*z**2))
sphere_harm.append( lambda x, y , z :35*z**4 - 30*z**2 + 3)
sphere_harm.append( lambda x, y , z :x*z*(3 - 7*z**2))
sphere_harm.append( lambda x, y , z :(x**2 - y**2)*(-1 + 7*z**2))
sphere_harm.append( lambda x, y , z :x*z*(x**2 - 3*y**2))
sphere_harm.append( lambda x, y , z :x**4 - 6*x**2*y**2 + y**4)
sphere_harm.append( lambda x, y , z :y*(5*x**4-10*x**2*y**2+ y**4))
sphere_harm.append( lambda x, y , z :x*y*(x**2-1*y**2)*z)
sphere_harm.append( lambda x, y , z :y*(-3*x**2+y**2)*(-1+9*z**2))
sphere_harm.append( lambda x, y , z :x*y*z*(-1+3*z**2))
sphere_harm.append( lambda x, y , z :y*(1-14*z**2+21*z**4))
sphere_harm.append( lambda x, y , z :z*(15-70*z**2+63*z**4))
sphere_harm.append( lambda x, y , z :x*(1-14*z**2+21*z**4))
sphere_harm.append( lambda x, y , z :(x**2-y**2)*z*(-1+3*z**2))
sphere_harm.append( lambda x, y , z :x*(x**2-3*y**2)*(-1+9*z**2))
sphere_harm.append( lambda x, y , z :(x**4-6*x**2*y**2+y**4)*z)
sphere_harm.append( lambda x, y , z :x*(x**4-10*x**2*y**2+5*y**4))
sphere_harm.append( lambda x, y , z :x*y*(3*x**4-10*x**2*y**2+3*y**4))
sphere_harm.append( lambda x, y , z :y*(5*x**4-10*x**2*y**2+y**4)*z)
sphere_harm.append( lambda x, y , z :x*y*(x**2-y**2)*(-1+11*z**2))
sphere_harm.append( lambda x, y , z :y*(-3*x**2+y**2)*z*(-3+11*z**2))
sphere_harm.append( lambda x, y , z :x*y*(1-18*z**2+33*z**4))
sphere_harm.append( lambda x, y , z :y*z*(5-30*z**2+33*z**4))
sphere_harm.append( lambda x, y , z :(-5+105*z**2-315*z**4+231*z**6))
sphere_harm.append( lambda x, y , z :x*z*(5-30*z**2+33*z**4))
sphere_harm.append( lambda x, y , z :(x**2-y**2)*(1-18*z**2+33*z**4))
sphere_harm.append( lambda x, y , z :x*(x**2-3*y**2)*z*(-3+11*z**2))
sphere_harm.append( lambda x, y , z :(x**4-6*x**2*y**2+y**4)*(-1+11*z**2))
sphere_harm.append( lambda x, y , z :x*(x**4-10*x**2*y**2+5*y**4)*z)
sphere_harm.append( lambda x, y , z :(x**6-15*x**4*y**2+15*x**2*y**4-y**6))
sphere_harm.append( lambda x, y , z :y*((-7)*x**6+35*x**4*y**2+(-21)*x**2*y**4+y**6))
sphere_harm.append( lambda x, y , z :x*y*(3*x**4+(-10)*x**2*y**2+3*y**4)*z)
sphere_harm.append( lambda x, y , z :y*(5*x**4+(-10)*x**2*y**2+y**4)*((-1)+13*z**2))
sphere_harm.append( lambda x, y , z :x*y*(x**2+(-1)*y**2)*z*((-3)+13*z**2))
sphere_harm.append( lambda x, y , z :y*((-3)*x**2+y**2)*(3+(-66)*z**2+143*z**4))
sphere_harm.append( lambda x, y , z :x*y*z*(15+(-110)*z**2+143*z**4))
sphere_harm.append( lambda x, y , z :y*(5+(-135)*z**2+495*z**4+(-429)*z**6))
sphere_harm.append( lambda x, y , z :z*((-35)+315*z**2+(-693)*z**4+429*z**6))
sphere_harm.append( lambda x, y , z :x*(5+(-135)*z**2+495*z**4+(-429)*z**6))
sphere_harm.append( lambda x, y , z :(x**2+(-1)*y**2)*z*(15+(-110)*z**2+143*z**4))
sphere_harm.append( lambda x, y , z :x*(x**2+(-3)*y**2)*(3+(-66)*z**2+143*z**4))
sphere_harm.append( lambda x, y , z :(x**4+(-6)*x**2*y**2+y**4)*z*((-3)+13*z**2))
sphere_harm.append( lambda x, y , z :x*(x**4+(-10)*x**2*y**2+5*y**4)*((-1)+13*z**2))
sphere_harm.append( lambda x, y , z :(x**6+(-15)*x**4*y**2+15*x**2*y**4+(-1)*y**6)*z)
sphere_harm.append( lambda x, y , z :x*(x**6+(-21)*x**4*y**2+35*x**2*y**4+(-7)*y**6) )

sphere_harm_grad_x = []
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :1)
sphere_harm_grad_x.append( lambda x, y , z :y)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :z)
sphere_harm_grad_x.append( lambda x, y , z :2*x)
sphere_harm_grad_x.append( lambda x, y , z :-6*x*y)
sphere_harm_grad_x.append( lambda x, y , z :y*z)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :-5*z**2 + 1)
sphere_harm_grad_x.append( lambda x, y , z :2*x*z)
sphere_harm_grad_x.append( lambda x, y , z :3*x**2 - 3*y**2)
sphere_harm_grad_x.append( lambda x, y , z :2*x**2*y + y*(x**2 - y**2))
sphere_harm_grad_x.append( lambda x, y , z :-6*x*y*z)
sphere_harm_grad_x.append( lambda x, y , z :y*(7*z**2 - 1))
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :z*(-7*z**2 + 3))
sphere_harm_grad_x.append( lambda x, y , z :2*x*(7*z**2 - 1))
sphere_harm_grad_x.append( lambda x, y , z :2*x**2*z + z*(x**2 - 3*y**2))
sphere_harm_grad_x.append( lambda x, y , z :4*x**3 - 12*x*y**2)
sphere_harm_grad_x.append( lambda x, y , z :y*(20*x**3 - 20*x*y**2))
sphere_harm_grad_x.append( lambda x, y , z :2*x**2*y*z + y*z*(x**2 - y**2))
sphere_harm_grad_x.append( lambda x, y , z :-6*x*y*(9*z**2 - 1))
sphere_harm_grad_x.append( lambda x, y , z :y*z*(3*z**2 - 1))
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :21*z**4 - 14*z**2 + 1)
sphere_harm_grad_x.append( lambda x, y , z :2*x*z*(3*z**2 - 1))
sphere_harm_grad_x.append( lambda x, y , z :2*x**2*(9*z**2 - 1) + (x**2 - 3*y**2)*(9*z**2 - 1))
sphere_harm_grad_x.append( lambda x, y , z :z*(4*x**3 - 12*x*y**2))
sphere_harm_grad_x.append( lambda x, y , z :x**4 - 10*x**2*y**2 + x*(4*x**3 - 20*x*y**2) + 5*y**4)
sphere_harm_grad_x.append( lambda x, y , z :x*y*(12*x**3 - 20*x*y**2) + y*(3*x**4 - 10*x**2*y**2 + 3*y**4))
sphere_harm_grad_x.append( lambda x, y , z :y*z*(20*x**3 - 20*x*y**2))
sphere_harm_grad_x.append( lambda x, y , z :2*x**2*y*(11*z**2 - 1) + y*(x**2 - y**2)*(11*z**2 - 1))
sphere_harm_grad_x.append( lambda x, y , z :-6*x*y*z*(11*z**2 - 3))
sphere_harm_grad_x.append( lambda x, y , z :y*(33*z**4 - 18*z**2 + 1))
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :z*(33*z**4 - 30*z**2 + 5))
sphere_harm_grad_x.append( lambda x, y , z :2*x*(33*z**4 - 18*z**2 + 1))
sphere_harm_grad_x.append( lambda x, y , z :2*x**2*z*(11*z**2 - 3) + z*(x**2 - 3*y**2)*(11*z**2 - 3))
sphere_harm_grad_x.append( lambda x, y , z :(4*x**3 - 12*x*y**2)*(11*z**2 - 1))
sphere_harm_grad_x.append( lambda x, y , z :x*z*(4*x**3 - 20*x*y**2) + z*(x**4 - 10*x**2*y**2 + 5*y**4))
sphere_harm_grad_x.append( lambda x, y , z :6*x**5 - 60*x**3*y**2 + 30*x*y**4)
sphere_harm_grad_x.append( lambda x, y , z :y*(-42*x**5 + 140*x**3*y**2 - 42*x*y**4))
sphere_harm_grad_x.append( lambda x, y , z :x*y*z*(12*x**3 - 20*x*y**2) + y*z*(3*x**4 - 10*x**2*y**2 + 3*y**4))
sphere_harm_grad_x.append( lambda x, y , z :y*(20*x**3 - 20*x*y**2)*(13*z**2 - 1))
sphere_harm_grad_x.append( lambda x, y , z :2*x**2*y*z*(13*z**2 - 3) + y*z*(x**2 - y**2)*(13*z**2 - 3))
sphere_harm_grad_x.append( lambda x, y , z :-6*x*y*(143*z**4 - 66*z**2 + 3))
sphere_harm_grad_x.append( lambda x, y , z :y*z*(143*z**4 - 110*z**2 + 15))
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :0)
sphere_harm_grad_x.append( lambda x, y , z :-429*z**6 + 495*z**4 - 135*z**2 + 5)
sphere_harm_grad_x.append( lambda x, y , z :2*x*z*(143*z**4 - 110*z**2 + 15))
sphere_harm_grad_x.append( lambda x, y , z :2*x**2*(143*z**4 - 66*z**2 + 3) + (x**2 - 3*y**2)*(143*z**4 - 66*z**2 + 3))
sphere_harm_grad_x.append( lambda x, y , z :z*(4*x**3 - 12*x*y**2)*(13*z**2 - 3))
sphere_harm_grad_x.append( lambda x, y , z :x*(4*x**3 - 20*x*y**2)*(13*z**2 - 1) + (13*z**2 - 1)*(x**4 - 10*x**2*y**2 + 5*y**4))
sphere_harm_grad_x.append( lambda x, y , z :z*(6*x**5 - 60*x**3*y**2 + 30*x*y**4))
sphere_harm_grad_x.append( lambda x, y , z :x**6 - 21*x**4*y**2 + 35*x**2*y**4 + x*(6*x**5 - 84*x**3*y**2 + 70*x*y**4) - 7*y**6)

sphere_harm_grad_y = []
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :1)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :x)
sphere_harm_grad_y.append( lambda x, y , z :z)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :-2*y)
sphere_harm_grad_y.append( lambda x, y , z :-3*x**2 + 3*y**2)
sphere_harm_grad_y.append( lambda x, y , z :x*z)
sphere_harm_grad_y.append( lambda x, y , z :-5*z**2 + 1)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :-2*y*z)
sphere_harm_grad_y.append( lambda x, y , z :-6*x*y)
sphere_harm_grad_y.append( lambda x, y , z :-2*x*y**2 + x*(x**2 - y**2))
sphere_harm_grad_y.append( lambda x, y , z :2*y**2*z + z*(-3*x**2 + y**2))
sphere_harm_grad_y.append( lambda x, y , z :x*(7*z**2 - 1))
sphere_harm_grad_y.append( lambda x, y , z :z*(-7*z**2 + 3))
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :-2*y*(7*z**2 - 1))
sphere_harm_grad_y.append( lambda x, y , z :-6*x*y*z)
sphere_harm_grad_y.append( lambda x, y , z :-12*x**2*y + 4*y**3)
sphere_harm_grad_y.append( lambda x, y , z :5*x**4 - 10*x**2*y**2 + y**4 + y*(-20*x**2*y + 4*y**3))
sphere_harm_grad_y.append( lambda x, y , z :-2*x*y**2*z + x*z*(x**2 - y**2))
sphere_harm_grad_y.append( lambda x, y , z :2*y**2*(9*z**2 - 1) + (-3*x**2 + y**2)*(9*z**2 - 1))
sphere_harm_grad_y.append( lambda x, y , z :x*z*(3*z**2 - 1))
sphere_harm_grad_y.append( lambda x, y , z :21*z**4 - 14*z**2 + 1)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :-2*y*z*(3*z**2 - 1))
sphere_harm_grad_y.append( lambda x, y , z :-6*x*y*(9*z**2 - 1))
sphere_harm_grad_y.append( lambda x, y , z :z*(-12*x**2*y + 4*y**3))
sphere_harm_grad_y.append( lambda x, y , z :x*(-20*x**2*y + 20*y**3))
sphere_harm_grad_y.append( lambda x, y , z :x*y*(-20*x**2*y + 12*y**3) + x*(3*x**4 - 10*x**2*y**2 + 3*y**4))
sphere_harm_grad_y.append( lambda x, y , z :y*z*(-20*x**2*y + 4*y**3) + z*(5*x**4 - 10*x**2*y**2 + y**4))
sphere_harm_grad_y.append( lambda x, y , z :-2*x*y**2*(11*z**2 - 1) + x*(x**2 - y**2)*(11*z**2 - 1))
sphere_harm_grad_y.append( lambda x, y , z :2*y**2*z*(11*z**2 - 3) + z*(-3*x**2 + y**2)*(11*z**2 - 3))
sphere_harm_grad_y.append( lambda x, y , z :x*(33*z**4 - 18*z**2 + 1))
sphere_harm_grad_y.append( lambda x, y , z :z*(33*z**4 - 30*z**2 + 5))
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :-2*y*(33*z**4 - 18*z**2 + 1))
sphere_harm_grad_y.append( lambda x, y , z :-6*x*y*z*(11*z**2 - 3))
sphere_harm_grad_y.append( lambda x, y , z :(11*z**2 - 1)*(-12*x**2*y + 4*y**3))
sphere_harm_grad_y.append( lambda x, y , z :x*z*(-20*x**2*y + 20*y**3))
sphere_harm_grad_y.append( lambda x, y , z :-30*x**4*y + 60*x**2*y**3 - 6*y**5)
sphere_harm_grad_y.append( lambda x, y , z :-7*x**6 + 35*x**4*y**2 - 21*x**2*y**4 + y**6 + y*(70*x**4*y - 84*x**2*y**3 + 6*y**5))
sphere_harm_grad_y.append( lambda x, y , z :x*y*z*(-20*x**2*y + 12*y**3) + x*z*(3*x**4 - 10*x**2*y**2 + 3*y**4))
sphere_harm_grad_y.append( lambda x, y , z :y*(13*z**2 - 1)*(-20*x**2*y + 4*y**3) + (13*z**2 - 1)*(5*x**4 - 10*x**2*y**2 + y**4))
sphere_harm_grad_y.append( lambda x, y , z :-2*x*y**2*z*(13*z**2 - 3) + x*z*(x**2 - y**2)*(13*z**2 - 3))
sphere_harm_grad_y.append( lambda x, y , z :2*y**2*(143*z**4 - 66*z**2 + 3) + (-3*x**2 + y**2)*(143*z**4 - 66*z**2 + 3))
sphere_harm_grad_y.append( lambda x, y , z :x*z*(143*z**4 - 110*z**2 + 15))
sphere_harm_grad_y.append( lambda x, y , z :-429*z**6 + 495*z**4 - 135*z**2 + 5)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :0)
sphere_harm_grad_y.append( lambda x, y , z :-2*y*z*(143*z**4 - 110*z**2 + 15))
sphere_harm_grad_y.append( lambda x, y , z :-6*x*y*(143*z**4 - 66*z**2 + 3))
sphere_harm_grad_y.append( lambda x, y , z :z*(13*z**2 - 3)*(-12*x**2*y + 4*y**3))
sphere_harm_grad_y.append( lambda x, y , z :x*(13*z**2 - 1)*(-20*x**2*y + 20*y**3))
sphere_harm_grad_y.append( lambda x, y , z :z*(-30*x**4*y + 60*x**2*y**3 - 6*y**5))
sphere_harm_grad_y.append( lambda x, y , z :x*(-42*x**4*y + 140*x**2*y**3 - 42*y**5))

sphere_harm_grad_z = []
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :1)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :y)
sphere_harm_grad_z.append( lambda x, y , z :6*z)
sphere_harm_grad_z.append( lambda x, y , z :x)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :x*y)
sphere_harm_grad_z.append( lambda x, y , z :-10*y*z)
sphere_harm_grad_z.append( lambda x, y , z :15*z**2 - 3)
sphere_harm_grad_z.append( lambda x, y , z :-10*x*z)
sphere_harm_grad_z.append( lambda x, y , z :x**2 - y**2)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :y*(-3*x**2 + y**2))
sphere_harm_grad_z.append( lambda x, y , z :14*x*y*z)
sphere_harm_grad_z.append( lambda x, y , z :-14*y*z**2 + y*(-7*z**2 + 3))
sphere_harm_grad_z.append( lambda x, y , z :140*z**3 - 60*z)
sphere_harm_grad_z.append( lambda x, y , z :-14*x*z**2 + x*(-7*z**2 + 3))
sphere_harm_grad_z.append( lambda x, y , z :14*z*(x**2 - y**2))
sphere_harm_grad_z.append( lambda x, y , z :x*(x**2 - 3*y**2))
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :x*y*(x**2 - y**2))
sphere_harm_grad_z.append( lambda x, y , z :18*y*z*(-3*x**2 + y**2))
sphere_harm_grad_z.append( lambda x, y , z :6*x*y*z**2 + x*y*(3*z**2 - 1))
sphere_harm_grad_z.append( lambda x, y , z :y*(84*z**3 - 28*z))
sphere_harm_grad_z.append( lambda x, y , z :63*z**4 - 70*z**2 + z*(252*z**3 - 140*z) + 15)
sphere_harm_grad_z.append( lambda x, y , z :x*(84*z**3 - 28*z))
sphere_harm_grad_z.append( lambda x, y , z :6*z**2*(x**2 - y**2) + (x**2 - y**2)*(3*z**2 - 1))
sphere_harm_grad_z.append( lambda x, y , z :18*x*z*(x**2 - 3*y**2))
sphere_harm_grad_z.append( lambda x, y , z :x**4 - 6*x**2*y**2 + y**4)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :y*(5*x**4 - 10*x**2*y**2 + y**4))
sphere_harm_grad_z.append( lambda x, y , z :22*x*y*z*(x**2 - y**2))
sphere_harm_grad_z.append( lambda x, y , z :22*y*z**2*(-3*x**2 + y**2) + y*(-3*x**2 + y**2)*(11*z**2 - 3))
sphere_harm_grad_z.append( lambda x, y , z :x*y*(132*z**3 - 36*z))
sphere_harm_grad_z.append( lambda x, y , z :y*z*(132*z**3 - 60*z) + y*(33*z**4 - 30*z**2 + 5))
sphere_harm_grad_z.append( lambda x, y , z :1386*z**5 - 1260*z**3 + 210*z)
sphere_harm_grad_z.append( lambda x, y , z :x*z*(132*z**3 - 60*z) + x*(33*z**4 - 30*z**2 + 5))
sphere_harm_grad_z.append( lambda x, y , z :(x**2 - y**2)*(132*z**3 - 36*z))
sphere_harm_grad_z.append( lambda x, y , z :22*x*z**2*(x**2 - 3*y**2) + x*(x**2 - 3*y**2)*(11*z**2 - 3))
sphere_harm_grad_z.append( lambda x, y , z :22*z*(x**4 - 6*x**2*y**2 + y**4))
sphere_harm_grad_z.append( lambda x, y , z :x*(x**4 - 10*x**2*y**2 + 5*y**4))
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :0)
sphere_harm_grad_z.append( lambda x, y , z :x*y*(3*x**4 - 10*x**2*y**2 + 3*y**4))
sphere_harm_grad_z.append( lambda x, y , z :26*y*z*(5*x**4 - 10*x**2*y**2 + y**4))
sphere_harm_grad_z.append( lambda x, y , z :26*x*y*z**2*(x**2 - y**2) + x*y*(x**2 - y**2)*(13*z**2 - 3))
sphere_harm_grad_z.append( lambda x, y , z :y*(-3*x**2 + y**2)*(572*z**3 - 132*z))
sphere_harm_grad_z.append( lambda x, y , z :x*y*z*(572*z**3 - 220*z) + x*y*(143*z**4 - 110*z**2 + 15))
sphere_harm_grad_z.append( lambda x, y , z :y*(-2574*z**5 + 1980*z**3 - 270*z))
sphere_harm_grad_z.append( lambda x, y , z :429*z**6 - 693*z**4 + 315*z**2 + z*(2574*z**5 - 2772*z**3 + 630*z) - 35)
sphere_harm_grad_z.append( lambda x, y , z :x*(-2574*z**5 + 1980*z**3 - 270*z))
sphere_harm_grad_z.append( lambda x, y , z :z*(x**2 - y**2)*(572*z**3 - 220*z) + (x**2 - y**2)*(143*z**4 - 110*z**2 + 15))
sphere_harm_grad_z.append( lambda x, y , z :x*(x**2 - 3*y**2)*(572*z**3 - 132*z))
sphere_harm_grad_z.append( lambda x, y , z :26*z**2*(x**4 - 6*x**2*y**2 + y**4) + (13*z**2 - 3)*(x**4 - 6*x**2*y**2 + y**4))
sphere_harm_grad_z.append( lambda x, y , z :26*x*z*(x**4 - 10*x**2*y**2 + 5*y**4))
sphere_harm_grad_z.append( lambda x, y , z :x**6 - 15*x**4*y**2 + 15*x**2*y**4 - y**6)
sphere_harm_grad_z.append( lambda x, y , z :0)

def gen_sphere_harm_basis(degree, nodes, projectors):
    #scaling = 1/norm(nodes[0] - nodes[-1])
    #nodes = (nodes - nodes[0]) * scaling
    n = len(nodes)
    if degree == -1:
        P = np.zeros((n, 0))
        rhs_x = np.zeros((0, n))
        rhs_y = np.zeros((0, n))
        rhs_z = np.zeros((0, n))
        return P, rhs_x, rhs_y, rhs_z
    
    x, y, z = nodes[:,0], nodes[:,1], nodes[:,2]
    
    num_cols = (degree + 1)**2
    P = np.zeros((n, num_cols))
    j = 0
    for i in range(num_cols):
        P[:,i] = sphere_harm[i](x,y,z)
        
    rhs_x = np.zeros(P.shape)
    rhs_y = np.zeros(P.shape)
    rhs_z = np.zeros(P.shape)
    for col in range(num_cols):
        for row, (node, proj) in enumerate(zip(nodes, projectors)):
            gradient = np.array([sphere_harm_grad_x[col](*node), 
                        sphere_harm_grad_y[col](*node), 
                        sphere_harm_grad_z[col](*node)])
            rhs_x[row, col] = proj[0] @ gradient
            rhs_y[row, col] = proj[1] @ gradient
            rhs_z[row, col] = proj[2] @ gradient
    #rhs_x, rhs_y, rhs_z = rhs_x.T * scaling , rhs_y.T * scaling, rhs_z.T * scaling
    rhs_x, rhs_y, rhs_z = rhs_x.T , rhs_y.T, rhs_z.T
    return P, rhs_x, rhs_y, rhs_z

def get_poly_basis(deg, nodes, projectors):
    num_nodes = len(nodes)
    if deg == -1:
        P = np.zeros((num_nodes, 0))
        rhs_x = np.zeros((0, num_nodes))
        rhs_y = np.zeros((0, num_nodes))
        rhs_z = np.zeros((0, num_nodes))
        return P, rhs_x, rhs_y, rhs_z
    if deg == 0:
        P = np.ones((num_nodes, 1))
        rhs_x = np.zeros((1, num_nodes))
        rhs_y = np.zeros((1, num_nodes))
        rhs_z = np.zeros((1, num_nodes))
        return P, rhs_x, rhs_y, rhs_z
    
    if deg == 1:
        P = np.ones((num_nodes, 4))
        P[:,1:] = nodes - nodes[0]
        
        rhs_x = np.array([ proj@[[1],[0],[0]] for proj in projectors])
        rhs_x = rhs_x.reshape((num_nodes,3)).T
        rhs_x = np.block([[np.zeros((1, num_nodes))], [rhs_x]])
        
        rhs_y = np.array([ proj@[[0],[1],[0]] for proj in projectors])
        rhs_y = rhs_y.reshape((num_nodes,3)).T
        rhs_y = np.block([[np.zeros((1, num_nodes))], [rhs_y]])

        rhs_z = np.array([ proj@[[0],[0],[1]] for proj in projectors])
        rhs_z = rhs_z.reshape((num_nodes,3)).T
        rhs_z = np.block([[np.zeros((1, num_nodes))], [rhs_z]])

        return P, rhs_x, rhs_y, rhs_z
