import numpy as np

def get_speed(mu, alpha, beta, theta):
    return (1.0/4.0)*(-2*alpha*beta*mu*theta - 2*alpha*theta + alpha - 2*mu*theta + np.sqrt(4*( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2)*( lambda base, exponent: base**exponent )(mu, 2)*( lambda base, exponent: base**exponent )(theta, 2) - 8*( lambda base, exponent: base**exponent )(alpha, 2)*beta*mu*( lambda base, exponent: base**exponent )(theta, 2) - 4*( lambda base, exponent: base**exponent )(alpha, 2)*beta*mu*theta + 4*( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(theta, 2) - 4*( lambda base, exponent: base**exponent )(alpha, 2)*theta + ( lambda base, exponent: base**exponent )(alpha, 2) + 8*alpha*beta*( lambda base, exponent: base**exponent )(mu, 2)*( lambda base, exponent: base**exponent )(theta, 2) - 8*alpha*mu*( lambda base, exponent: base**exponent )(theta, 2) + 4*alpha*mu*theta + 4*( lambda base, exponent: base**exponent )(mu, 2)*( lambda base, exponent: base**exponent )(theta, 2)))/(alpha*mu*theta)

def Q_numeric(x, mu, alpha, beta, theta):
    c = get_speed(mu, alpha, beta, theta)
    return (lambda input: np.heaviside(input,0.5))(x) + (alpha*beta*np.exp(x*(alpha*beta + 1)/(alpha*c)) + 1)*(lambda input: np.heaviside(input,0.5))(-x)/(alpha*beta + 1)

def U_numeric(x, mu, alpha, beta, theta):
    c = get_speed(mu, alpha, beta, theta)
    return (1.0/2.0)*(alpha*c + 1)*np.exp(-x)*(lambda input: np.heaviside(input,0.5))(x)/((mu*c + 1)*(alpha*beta + alpha*c + 1)) + (-1.0/2.0*( lambda base, exponent: base**exponent )(alpha, 3)*beta*c*np.exp(x*(beta + 1.0/alpha)/c)/((alpha*beta*mu - alpha + mu)*(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1)) - 1.0/2.0*( lambda base, exponent: base**exponent )(alpha, 3)*beta*c*np.exp(x*(beta + 1.0/alpha)/c)/((alpha*beta*mu - alpha + mu)*(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1)) + (1.0/2.0)*alpha*beta/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + (1.0/2.0)*alpha*c/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + (( lambda base, exponent: base**exponent )(alpha, 3)*beta*mu*( lambda base, exponent: base**exponent )(c, 2)/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + ( lambda base, exponent: base**exponent )(alpha, 3)*beta*mu*( lambda base, exponent: base**exponent )(c, 2)/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) - ( lambda base, exponent: base**exponent )(alpha, 3)*beta*c/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) - ( lambda base, exponent: base**exponent )(alpha, 3)*beta*c/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) + 2*alpha*beta*( lambda base, exponent: base**exponent )(mu, 2)*theta*c - alpha*beta*( lambda base, exponent: base**exponent )(mu, 2)*c*(alpha*beta/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + alpha*c/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + 1.0/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1)) - alpha*beta*( lambda base, exponent: base**exponent )(mu, 2)*c/(alpha*beta + 1) - 2*alpha*beta*mu*theta + alpha*beta*mu*(alpha*beta/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + alpha*c/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + 1.0/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1)) + alpha*beta*mu*(-( lambda base, exponent: base**exponent )(alpha, 2)*beta*c/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) + alpha*beta/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) - alpha*c/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) + 1.0/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1)) + alpha*beta*mu/(alpha*beta + 1) - 2*alpha*mu*theta*c + alpha*mu*c*(alpha*beta/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + alpha*c/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + 1.0/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1)) + alpha*mu*c/(alpha*beta + 1) + 2*alpha*theta - alpha*(alpha*beta/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + alpha*c/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + 1.0/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1)) - alpha*(-( lambda base, exponent: base**exponent )(alpha, 2)*beta*c/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) + alpha*beta/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) - alpha*c/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) + 1.0/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1)) - alpha/(alpha*beta + 1) + 2*( lambda base, exponent: base**exponent )(mu, 2)*theta*c - ( lambda base, exponent: base**exponent )(mu, 2)*c*(alpha*beta/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + alpha*c/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + 1.0/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1)) - ( lambda base, exponent: base**exponent )(mu, 2)*c/(alpha*beta + 1) - 2*mu*theta + mu*(alpha*beta/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + alpha*c/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) + 1.0/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1)) + mu*(-( lambda base, exponent: base**exponent )(alpha, 2)*beta*c/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) + alpha*beta/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) - alpha*c/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) + 1.0/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1)) + mu/(alpha*beta + 1))*np.exp(x/(mu*c))/(2*alpha*beta*( lambda base, exponent: base**exponent )(mu, 2)*c - 2*alpha*beta*mu - 2*alpha*mu*c + 2*alpha + 2*( lambda base, exponent: base**exponent )(mu, 2)*c - 2*mu) + (1.0/2.0)/(( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c + 2*alpha*beta + alpha*c + 1) - 1.0/2.0*(-( lambda base, exponent: base**exponent )(alpha, 2)*beta*c/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) + alpha*beta/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) - alpha*c/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1) + 1.0/(-( lambda base, exponent: base**exponent )(alpha, 2)*( lambda base, exponent: base**exponent )(beta, 2) + ( lambda base, exponent: base**exponent )(alpha, 2)*beta*c - 2*alpha*beta + alpha*c - 1))*np.exp(x)/(mu*c - 1) + (1.0/2.0)/(alpha*beta + 1))*(lambda input: np.heaviside(input,0.5))(-x)
